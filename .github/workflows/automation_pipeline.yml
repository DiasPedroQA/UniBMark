name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  checkout:
    name: Checkout do Código
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Exibir estrutura do projeto
        run: |
          pwd
          ls -R
          echo "Estrutura do projeto verificada"

  setup-python:
    name: Configurar Python
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Verificar versões
        run: |
          python --version
          pip --version

      - name: Instalar dependências básicas
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

  lint:
    name: Verificar Código (Linting)
    runs-on: ubuntu-latest
    needs: setup-python

    steps:
      - uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Executar Linters
        run: |
          pip install black flake8 mypy pylint
          black --check src/ tests/
          flake8 src/ tests/
          mypy src/
          pylint src/

  test:
    name: Executar Testes Unitários
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.10']
    needs: setup-python

    steps:
      - uses: actions/checkout@v3

      - name: Configurar Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Executar testes (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pytest tests/ --junitxml=report.xml --cov=src --cov-report=xml --cov-report=html

      - name: Executar testes (Unix)
        if: runner.os != 'Windows'
        run: |
          pytest tests/ --junitxml=report.xml --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ runner.os }}
          path: |
            coverage.xml
            htmlcov/

  finalize:
    name: Finalizar Pipeline
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Verificar Resultados
        run: |
          echo "Pipeline executada com sucesso em todos os sistemas operacionais"
          echo "Linting e testes completados"
