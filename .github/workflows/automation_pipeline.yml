name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  checkout:
    name: Checkout do Código
    runs-on: ubuntu-latest
    outputs:
      python-version: '3.10'

    steps:
      - name: Iniciando fase de checkout
        run: echo "Iniciando fase de checkout do código"

      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Exibir estrutura do projeto
        run: |
          echo "Exibindo estrutura do projeto"
          pwd
          ls -R
          echo "Estrutura do projeto verificada"

  setup-python:
    name: Configurar Python e Instalar Dependências
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Iniciando configuração do ambiente Python
        run: echo "Iniciando configuração do ambiente Python"

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.checkout.outputs.python-version }}

      - name: Verificar versões
        run: |
          echo "Verificando versões do Python e pip"
          python --version
          pip --version

      - name: Instalar dependências
        run: |
          echo "Instalando dependências do projeto"
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov

  lint:
    name: Verificar Código (Linting)
    runs-on: ubuntu-latest
    needs: setup-python

    steps:
      - name: Iniciando fase de linting
        run: echo "Iniciando verificação de código (Linting)"

      - name: Verificar Código (Linting)
        run: |
          echo "Executando ferramentas de linting"
          black --check src/ tests/ || true
          flake8 src/ tests/ || true
          mypy src/ || true
          pylint src/ || true

  test:
    name: Executar Testes Unitários
    runs-on: ubuntu-latest
    needs: setup-python

    steps:
      - name: Iniciando fase de testes
        run: echo "Iniciando execução de testes unitários"

      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependências para testes
        run: |
          echo "Instalando dependências para testes"
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov

      - name: Listar arquivos no diretório atual
        run: ls -la

      - name: Verificar existência do diretório de testes
        run: |
          if [ -d tests ]; then
            echo "Diretório 'tests' encontrado"
            ls -R tests/
          else
            echo "Diretório 'tests' não encontrado"
            exit 1
          fi

      - name: Executar testes
        run: |
          echo "Executando testes"
          pytest tests/ --junitxml=report.xml --cov=src --cov-report=xml --cov-report=html

      - name: Upload do relatório de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

  finalize:
    name: Finalizar Pipeline
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Iniciando fase de finalização
        run: echo "Iniciando fase de finalização da pipeline"

      - name: Verificar Resultados
        run: |
          echo "Pipeline executada com sucesso"
          echo "Linting e testes completados"
          if [ -f "report.xml" ]; then
            echo "Relatório de testes encontrado"
            cat report.xml
          else
            echo "Relatório de testes não encontrado"
          fi

      - name: Notificar Conclusão
        run: |
          echo "Pipeline concluída com sucesso"
          # Aqui você pode adicionar comandos para enviar notificações, como Slack, email, etc.
