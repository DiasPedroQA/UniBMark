name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  checkout:
    name: Checkout do Código
    runs-on: ubuntu-latest
    outputs:
      python-version: '3.10'

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Exibir estrutura do projeto
        run: |
          echo "Estrutura do projeto:"
          pwd
          ls -R

  setup-python:
    name: Configurar Python e Instalar Dependências
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.checkout.outputs.python-version }}

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov

  lint:
    name: Verificar Código (Linting)
    runs-on: ubuntu-latest
    needs: setup-python

    steps:
      - name: Verificar Código
        run: |
          pip install black flake8 mypy pylint
          black --check src/ tests/
          flake8 src/ tests/
          mypy src/
          pylint src/

  test:
    name: Executar Testes Unitários
    runs-on: ubuntu-latest
    needs: setup-python
    if: github.event_name == 'push' && contains(github.event.head_commit.modified, 'src/')

    steps:
      - name: Verificar dependências e testes
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov

      - name: Verificar existência de arquivos de teste
        run: |
          if [ ! -d tests ]; then
            echo "Erro: Diretório de testes não encontrado!"
            exit 1
          fi

      - name: Executar testes
        run: |
          pytest tests/ --junitxml=report.xml --cov=src --cov-report=xml --cov-report=html

      - name: Upload do relatório de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

  create-pull-request:
    name: Criar Pull Request para Main
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar identidade do Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Criar Pull Request automaticamente
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: develop
          base: main
          title: "Merge automático de develop para main"
          body: "Este PR foi gerado automaticamente após a execução bem-sucedida da pipeline."
          draft: false

  finalize:
    name: Finalizar Pipeline
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Verificar arquivos essenciais
        run: |
          for file in "README.md" "requirements.txt" "pyproject.toml"; do
            if [ ! -f "$file" ]; then
              echo "Erro: $file não encontrado!"
              exit 1
            fi
          done

      - name: Exibir relatório de testes
        run: |
          if [ -f "report.xml" ]; then
            echo "Relatório de testes encontrado"
            cat report.xml
          else
            echo "Relatório de testes não encontrado"
          fi
